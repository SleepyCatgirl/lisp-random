;;(defun list-3 (n m)
;;  (let ((div-3 (* n 3)))
;;    (cond ((> n m) 0)
;;          ((> div-3 m) 0)
;;          ((equal (rem div-3 5) 0) (list-3 (+ 1 n) m))
;;          (t (format t " ~S " div-3)
;;             (list-3 (+ 1 n) m)))))
;;(defun list-5 (n m)
;;  (let ((div-5 (* n 5)))
;;    (cond ((> n m) 0)
;;          ((> div-5 m) 0)
;;          ((equal (rem div-5 3) 0) (list-5 (+ 1 n) m))
;;          (t (format t " ~S " div-5)
;;             (list-5 (+ 1 n) m)))))
;;(defun list-3-5 (n m)
;;  (let ((div-3-5 (* n 3 5)))
;;    (cond ((> n m) 0)
;;          ((> div-3-5 m) 0)
;;          (t (format t " ~S " div-3-5)
;;             (list-3-5 (+ 1 n) m)))))




(defun list-3 (n m)
  (let ((div-3 (* n 3)))
    (cond ((> n m) 0)
          ((> div-3 m) 0)
          ((equal (rem div-3 5) 0) (list-3 (+ 1 n) m))
          (t (+ div-3 (list-3 (+ 1 n) m))))))
(defun list-5 (n m)
  (let ((div-5 (* n 5)))
    (cond ((> n m) 0)
          ((> div-5 m) 0)
          ((equal (rem div-5 3) 0) (list-5 (+ 1 n) m))
          (t (+ div-5 (list-5 (+ 1 n) m))))))
(defun list-3-5 (n m)
  (let ((div-3-5 (* n 3 5)))
    (cond ((> n m) 0)
          ((> div-3-5 m) 0)
          (t (+ div-3-5 (list-3-5 (+ 1 n) m))))))

(defun add-3-5 (m)
  (+ (list-3 1 m) (list-5 1 m) (list-3-5 1 m)))


;;(defun fib (n)
;;  (cond ((equal 1 n) 1)
;;        ((equal 2 n) 2)
;;        (t (+ (fib (- n 1)) (fib (- n 2))))))
;;(defun fib-iter (x y z zz)
;;  (cond ((zerop x) zz)
;;        (t (fib-iter (- x 1) z zz (+ y z)))))

(defun fib-iter (x y z)
  (let* ((currentNum (+ y z)))
    (cond ((zerop x) z)
          ((> currentNum 4000000) z)
          (t (fib-iter (- x 1) z currentNum)))))
(defun fib-main (n)
  (fib-iter n 1 2))
